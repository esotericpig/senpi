/**
 * This file is part of senpi.
 * Copyright (c) 2016-2017 Bradley Whited
 *
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */

plugins {
  id 'application'
}

/**
 * Properties
 */
ext.name    = 'senpi'
version     = '0.6.4'
ext.author  = 'Bradley Whited'
ext.license = 'LGPL-3.0'

ext.summary  = 'pi base 12'
description  = 'pi in base 12 with custom-made Big Integer/Decimal classes for use with (almost) any base.'
ext.homepage = 'https://github.com/esotericpig/senpi'

group             = 'com.esotericpig.senpi'
ext.mainClassName = "${project.group}.Senpi"

ext.charset  = 'UTF-8'
ext.encoding = 'UTF-8'
ext.locale   = 'en_US'

// Test
ext.apiGuardianVersion  = '1.0.0'
ext.junit4Version       = '4.12' // Not used
ext.junitJupiterVersion = '5.0.2'
ext.junitVintageVersion = '4.12.2' // Not used

// Javadoc
javadoc.title = "${project.ext.name} v${project.version}"

application {
  mainClass.set(project.mainClassName)
  applicationName project.name
}

java {
  sourceCompatibility = '1.8' // Source language to interpret (*.java).
  targetCompatibility = '1.8' // Bytecode to output (*.class).
}

/**
 * Repositories, dependencies, etc.
 */
repositories {
  mavenCentral()
}

dependencies {
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.+'

  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.+'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.+'
}

/**
 * Tasks, etc.
 */
defaultTasks 'run'

compileJava {
  encoding = project.ext.encoding
}

compileTestJava {
  encoding = project.ext.encoding
}

tasks.named('test') {
  useJUnitPlatform()
}

jar {
  manifest {
    attributes 'Main-Class': mainClassName
    attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')

    attributes 'App-Name': project.ext.name
    attributes 'App-Version': project.version
    attributes 'App-Author': project.ext.author
    attributes 'App-License': project.ext.license

    attributes 'App-Summary': project.ext.summary
    attributes 'App-Description': project.description
    attributes 'App-Homepage': project.ext.homepage
  }

  from {
    configurations.runtimeClasspath.collect {
      def tree = it.isDirectory() ? fileTree(it) : zipTree(it)

      tree.matching {
        // Include only the essential files.
        //include '**/*.class', '**/*.java', '**/resources/'

        // Exclude Javadoc/files in root and META-INF.
        exclude '*','META-INF/'
      }
    }
  }
}

javadoc {
  options {
    author = true
    charSet = project.ext.charset
    encoding = project.ext.encoding
    locale = project.ext.locale
    memberLevel = JavadocMemberLevel.PROTECTED // Show public & protected (don't show private)
    version = true
  }
}

run {
  standardInput = System.in
}
